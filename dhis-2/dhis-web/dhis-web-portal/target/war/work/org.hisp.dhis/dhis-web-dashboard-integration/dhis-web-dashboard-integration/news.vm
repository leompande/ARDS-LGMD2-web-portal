
#sharingDialog()

<script type="text/javascript">
    var i18n_share_your_interpretation_of = '$encoder.jsEscape( $i18n.getString( "share_your_interpretation_of" ), "'")';
    var i18n_interpretation_was_shared = '$encoder.jsEscape( $i18n.getString( "interpretation_was_shared" ), "'")';
    var i18n_viewing = '$encoder.jsEscape( $i18n.getString( "viewing" ), "'")';
    var i18n_click_add_new_to_get_started = '$encoder.jsEscape( $i18n.getString( "click_add_new_to_get_started" ), "'")';
    var i18n_add_stuff_by_searching = '$encoder.jsEscape( $i18n.getString( "add_stuff_by_searching" ), "'")';
    var i18n_arrange_dashboard_by_dragging_and_dropping = '$encoder.jsEscape( $i18n.getString( "arrange_dashboard_by_dragging_and_dropping" ), "'")';
    var i18n_remove = '$encoder.jsEscape( $i18n.getString( "remove" ), "'")';
    var i18n_view_full_size = '$encoder.jsEscape( $i18n.getString( "view_full_size" ), "'")';
    var i18n_click_to_explore_drag_to_new_position = '$encoder.jsEscape( $i18n.getString( "click_to_explore_drag_to_new_position" ), "'")';
    var i18n_drag_to_new_position = '$encoder.jsEscape( $i18n.getString( "drag_to_new_position" ), "'")';
    var i18n_manage = '$encoder.jsEscape( $i18n.getString( "manage" ), "'")';
    var i18n_share = '$encoder.jsEscape( $i18n.getString( "share" ), "'")';
    var i18n_share_interpretation = '$encoder.jsEscape( $i18n.getString( "share_interpretation" ), "'")';
    var i18n_see_more_hits = '$encoder.jsEscape( $i18n.getString( "see_more_hits" ), "'")';
    var i18n_see_fewer_hits = '$encoder.jsEscape( $i18n.getString( "see_fewer_hits" ), "'")';
    var i18n_add = '$encoder.jsEscape( $i18n.getString( "add" ), "'")';

</script>

<div class="row">
    #parse( "ardsMacros.vm" )
    #leftMenu()
<div class="col-md-10" id="mainPages">
<div class="analysis-wraper">

    <div class="alert alert-danger fade in" role="alert" style="padding: 4px">
        <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">x</span><span class="sr-only">Close</span></button>
        <strong>Empty Value!</strong> Please select at least one Administrative unit, period and data.
    </div>

    <div class="row">
        <div class="col-sm-3">
            Administrative units <br>
            <div class="btn-group btn-group-xs unitfilter">
                <button type="button" class="btn btn-default" id="allunits">all</button>
                <button type="button" class="btn btn-default" id="regions">Regions</button>
                <button type="button" class="btn btn-default" id="district">disticts</button>
            </div>
            <br>
            <select name="adminUnit" multiple="multiple" class="adminUnit">

            </select>
        </div>
        <div class="col-sm-3">
            Periods <br>
            <div class="btn-group btn-group-xs periodfilter" >
                <button type="button" class="btn btn-default" id="years">Yearly</button>
                <button type="button" class="btn btn-default" id="quarters">quarterly</button>
                <button type="button" class="btn btn-default" id="mounths">monthly</button>
            </div>
            <br>
            <select name="periods" multiple="multiple" class="periods">

            </select>
        </div>
        <div class="col-sm-3">
            Data<br><br>
            <select name="data" multiple="multiple" class="data-element">

            </select>
        </div>
        <div class="col-sm-3">
            Category<br><br>
            <select name="category" class="category">
                <option value="pe">period</option>
                <option value="ou">administrative units</option>
            </select>
        </div>
    </div>

    <div class="row" style="margin-top: 15px">
        <div class="col-sm-12">
            <div class="btn-group btn-group-xs reports">
                <button class="btn btn-default" id="draw_table"><img src='../dhis-web-commons/analysis/table.png' style='height:20px;width:20px'> Table</button>
                <button class="btn btn-default" id="draw_bar"><img src='../dhis-web-commons/analysis/bar.png' style='height:20px;width:20px'> Bar Chart</button>
                <button class="btn btn-default" id="draw_column"><img src='../dhis-web-commons/analysis/column.png' style='height:20px;width:20px'> Column Chart</button>
                <button class="btn btn-default" id="draw_line"><img src='../dhis-web-commons/analysis/line.png' style='height:20px;width:20px'> Line Chart</button>
                <button class="btn btn-default" id="draw_pie"><img src='../dhis-web-commons/analysis/pie.png' style='height:20px;width:20px'> Pie Chart</button>
                <button class="btn btn-default" id="draw_staked"><img src='../dhis-web-commons/analysis/staked.jpg' style='height:20px;width:20px'> Stacked Chart</button>
                <button class="btn btn-default" id="draw_spider"><img src='../dhis-web-commons/analysis/spider.jpg' style='height:20px;width:20px'> Spider Chart</button>
                <button class="btn btn-default" id="draw_combined"><img src='../dhis-web-commons/analysis/combined.jpg' style='height:20px;width:20px'> Combined Chart</button>
                <button class="btn btn-default" id="export_cvs"  style="margin-left: 5px"><img src='../dhis-web-commons/analysis/cvs.jpg' style='height:20px;width:20px'> Export to Excel</button>
            </div>
        </div>
    </div>
    <div class="row" id="mainarea" style="margin-top: 15px">

    </div>
</div>
<div class="row" id="content_to_hide">

<div class="col-md-10">
<div id="contents" class="image">

<div id="default_home">

<div id="table_data" class='row'>
<div class="row" id="">
<style type="text/css">

    #example3{
        border: 1px solid #FFF;
        padding: 10px;
        background: #ffffff; /* Old browsers */
        /*background: -moz-linear-gradient(top, #ffffff 0%, #f1f1f1 50%, #e1e1e1 51%, #f6f6f6 100%); *//* FF3.6+ */
        /*background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(50%,#f1f1f1), color-stop(51%,#e1e1e1), color-stop(100%,#f6f6f6)); *//* Chrome,Safari4+ */
        /*background: -webkit-linear-gradient(top, #ffffff 0%,#f1f1f1 50%,#e1e1e1 51%,#f6f6f6 100%); *//* Chrome10+,Safari5.1+ */
        /*background: -o-linear-gradient(top, #ffffff 0%,#f1f1f1 50%,#e1e1e1 51%,#f6f6f6 100%); *//* Opera 11.10+ */
        /*background: -ms-linear-gradient(top, #ffffff 0%,#f1f1f1 50%,#e1e1e1 51%,#f6f6f6 100%); *//* IE10+ */
        /*background: linear-gradient(top, #ffffff 0%,#f1f1f1 50%,#e1e1e1 51%,#f6f6f6 100%); *//* W3C */
    }

    #example3 a{ /*CSS specific to demo 3*/
        color: #0D507A;
        text-decoration: none;
        font-weight: bold;

    }

    #example3 p{ /*CSS specific to demo 3*/
        margin-bottom: 2px;
        border-top: 1px solid #E0E0E0;
        border-bottom: 1px solid #FFF;
        padding-left: 10px;
        padding-top: 15px;
    }

</style>
<!-- feeds body--->

<div class="row">
<div class="col-md-12 ">
<span id="showLeftBars" class="pull-left hidden-sm hidden-xs">
         <p>
           <div id="min"><a href="#" onclick="javascript:minSide()" title="hide menu"><img src="../images/hide_menu.png" width="16" height="16" /></a></div>
           <div id="max" style="display:none"><a href="#" onclick="javascript:maxSide()" title="show menu"><img src="../images/extend_menu.png" width="16" height="16" /></a></div>
    </p>
</span>
<div class=""><p style="font-size:16px;font-weight:bolder;padding-left: 20px;">Current News</p></div>
<script type="text/javascript" >

    // -------------------------------------------------------------------
    // gAjax RSS Feeds Displayer- By Dynamic Drive, available at: http://www.dynamicdrive.com
    // Created: July 17th, 2007
    // Updated June 14th, 10': Fixed issue in IE where labels would sometimes be associated with the incorrect feed items
    // Updated May 24th, 12': Added onfeedload event handler to run code when a RSS displayer has fully loaded 2) Script now skips the loading of a RSS feed if it's invalid (instead of alert a message)
    // Updated Sept 20th, 12': Version 2. Adds support for templating of entries' output, search and replace via regular expressions inside any RSS field
    // -------------------------------------------------------------------

    var gfeedfetcher_loading_image="../dhis-web-commons/css/portalImages/loading.gif" //Full URL to "loading" image. No need to config after this line!!

    google.load("feeds", "1") //Load Google Ajax Feed API (version 1)

    function gfeedfetcher(divid, divClass, linktarget){
        this.linktarget=linktarget || "" //link target of RSS entries
        this.feedlabels=[] //array holding lables for each RSS feed
        this.feedurls=[]
        this.feeds=[] //array holding combined RSS feeds' entries from Feed API (result.feed.entries)
        this.feedsfetched=0 //number of feeds fetched
        this.feedlimit=5
        this.showoptions="" //Optional components of RSS entry to show (none by default)
        this.outputtemplate="{title} {label} {date}<br />{description}" // output template for each RSS entry
        this.regexprules=[] // array to hold regexp rules [regex, replacestr, field_to_apply_to]
        this.sortstring="date" //sort by "date" by default
        document.write('<div id="'+divid+'" class="'+divClass+'"></div>') //output div to contain RSS entries
        this.feedcontainer=document.getElementById(divid)
        this.containertag=["li", "<li>"] // [tag to wrap around each rss entry, final tag]
        this.onfeedload=function(){}
    }


    gfeedfetcher.prototype.addFeed=function(label, url){
        this.feedlabels[this.feedlabels.length]=label
        this.feedurls[this.feedurls.length]=url
    }

    gfeedfetcher.prototype.filterfeed=function(feedlimit, sortstr){
        this.feedlimit=feedlimit
        if (typeof sortstr!="undefined")
            this.sortstring=sortstr
    }

    gfeedfetcher.prototype.displayoptions=function(parts){
        this.showoptions=parts //set RSS entry options to show ("date, datetime, time, snippet, label, description")
    }

    gfeedfetcher.prototype.definetemplate=function(str){
        this.outputtemplate=str
    }

    gfeedfetcher.prototype.addregexp=function(regliteral, replacewith, field){
        this.regexprules.push([
            regliteral,
            replacewith,
            field
        ])
    }

    gfeedfetcher.prototype.setentrycontainer=function(containertag, cssclass){  //set element that should wrap around each RSS entry item
        this.containertag=[containertag.toLowerCase(), '<' + containertag.toLowerCase ()+ (cssclass? ' class="'+cssclass+'"' : '') + ' >']
    }

    gfeedfetcher.prototype.init=function(){
        this.feedsfetched=0 //reset number of feeds fetched to 0 (in case init() is called more than once)
        this.feeds=[] //reset feeds[] array to empty (in case init() is called more than once)
        this.feedcontainer.innerHTML='<img src="'+gfeedfetcher_loading_image+'" /> Retrieving RSS feed(s)'
        var displayer=this
        for (var i=0; i<this.feedurls.length; i++){ //loop through the specified RSS feeds' URLs
            var feedpointer=new google.feeds.Feed(this.feedurls[i]) //create new instance of Google Ajax Feed API
            var items_to_show=(this.feedlimit<=this.feedurls.length)? 1 : Math.floor(this.feedlimit/this.feedurls.length) //Calculate # of entries to show for each RSS feed
            if (this.feedlimit%this.feedurls.length>0 && this.feedlimit>this.feedurls.length && i==this.feedurls.length-1) //If this is the last RSS feed, and feedlimit/feedurls.length yields a remainder
                items_to_show+=(this.feedlimit%this.feedurls.length) //Add that remainder to the number of entries to show for last RSS feed
            feedpointer.setNumEntries(items_to_show) //set number of items to display
            feedpointer.load(function(label){
                return function(r){
                    displayer._fetch_data_as_array(r, label)
                }
            }(this.feedlabels[i])) //call Feed.load() to retrieve and output RSS feed.
        }
    }


    gfeedfetcher._formatdate=function(datestr, showoptions){
        var itemdate=new Date(datestr)
        var parseddate=(showoptions.indexOf("datetime")!=-1)? itemdate.toLocaleString() : (showoptions.indexOf("date")!=-1)? itemdate.toLocaleDateString() : (showoptions.indexOf("time")!=-1)? itemdate.toLocaleTimeString() : ""
        return "<span class='datefield'>"+parseddate+"</span>\n"
    }

    gfeedfetcher._sortarray=function(arr, sortstr){
        var sortstr=(sortstr=="label")? "ddlabel" : sortstr //change "label" string (if entered) to "ddlabel" instead, for internal use
        if (sortstr=="title" || sortstr=="ddlabel"){ //sort array by "title" or "ddlabel" property of RSS feed entries[]
            arr.sort(function(a,b){
                var fielda=a[sortstr].toLowerCase()
                var fieldb=b[sortstr].toLowerCase()
                return (fielda<fieldb)? -1 : (fielda>fieldb)? 1 : 0
            })
        }
        else{ //else, sort by "publishedDate" property (using error handling, as "publishedDate" may not be a valid date str if an error has occured while getting feed
            try{
                arr.sort(function(a,b){return new Date(b.publishedDate)-new Date(a.publishedDate)})
            }
            catch(err){}
        }
    }

    gfeedfetcher.prototype._fetch_data_as_array=function(result, ddlabel){
        var thisfeed=(!result.error)? result.feed.entries : "" //get all feed entries as a JSON array or "" if failed
        if (thisfeed==""){ //if error has occured fetching feed
            this._signaldownloadcomplete()
            return
        }
        for (var i=0; i<thisfeed.length; i++){ //For each entry within feed
            result.feed.entries[i].ddlabel=ddlabel //extend it with a "ddlabel" property
        }
        this.feeds=this.feeds.concat(thisfeed) //add entry to array holding all feed entries
        this._signaldownloadcomplete() //signal the retrieval of this feed as complete (and move on to next one if defined)
    }

    gfeedfetcher.prototype._signaldownloadcomplete=function(){
        this.feedsfetched+=1
        if (this.feedsfetched==this.feedurls.length){ //if all feeds fetched
            this._displayresult(this.feeds) //display results
            this.onfeedload()
        }
    }


    gfeedfetcher.prototype._displayresult=function(feeds){
        var rssoutput=(this.containertag[0]=="li")? "<ul>\n" : ""
        gfeedfetcher._sortarray(feeds, this.sortstring)
        var itemurl=[], itemtitle=[], itemlabel=[], itemdate=[], itemdescription=[]
        for (var i=0; i<feeds.length; i++){
            itemurl.push(feeds[i].link)
            itemtitle.push('<span class="titlefield"><a href="' + feeds[i].link + '" target="' + this.linktarget + '">' + feeds[i].title + '</a></span>\n')
            itemlabel.push(/label/i.test(this.showoptions)? '<span class="labelfield">'+this.feeds[i].ddlabel+'</span>\n' : "")
            itemdate.push(gfeedfetcher._formatdate(feeds[i].publishedDate, this.showoptions))
            var itemdescriptionsingle=/description/i.test(this.showoptions)? feeds[i].content : /snippet/i.test(this.showoptions)? feeds[i].contentSnippet  : ""
            itemdescriptionsingle=(itemdescriptionsingle!="")? '<span class="descriptionfield">' + itemdescriptionsingle + '</span>\n' : ""
            itemdescription.push(itemdescriptionsingle)
        }
        // create temp object to store references to rss components, for access dynamically:
        var holder={urlfield: itemurl, titlefield: itemtitle, labelfield: itemlabel, datefield: itemdate, descriptionfield: itemdescription}
        var regexprules=this.regexprules
        for (var i=(this.regexprules && this.regexprules.length>0? this.regexprules.length-1 : -1); i>=0; i--){ // loop thru regexprules array
            if (regexprules[i][2]=="titlefield" || regexprules[i][2]=="labelfield" || regexprules[i][2]=="datefield" || regexprules[i][2]=="descriptionfield"){
                var targetarray=holder[regexprules[i][2]] // reference array containing said field type (ie: itemdescription if regexprules[i][2]=="descriptionfield")
                targetarray=targetarray.join('***delimiter***') // combine array elements before doing search and replace
                        .replace(regexprules[i][0], regexprules[i][1])
                        .split('***delimiter***') // revert back to array
                holder[regexprules[i][2]]=targetarray
                regexprules.splice(i,1) // remove this rule from regexprules
            }
        }
        for (var i=0; i<feeds.length; i++){ // loop thru feeds, molding each feed entry based on template
            rssoutput+= this.containertag[1] + this.outputtemplate.replace(/({title})|({url})|({label})|({date})|({description})/ig, function(m){
                if (m == "{title}")
                    return holder.titlefield[i]
                else if (m == "{url}")
                    return holder.urlfield[i]
                else if (m == "{label}")
                    return holder.labelfield[i]
                else if (m == "{date}")
                    return holder.datefield[i]
                else if (m == "{description}")
                    return holder.descriptionfield[i]
            }) + "</" + this.containertag[0] + ">" + "\n\n"
        }
        rssoutput+=(this.containertag[0]=="li")? "</ul>" : ""
        for (var i=0; i<this.regexprules.length; i++){ // loop thru remaining regexprules array that target the entire feed in general (versus specific field)
            rssoutput=rssoutput.replace(this.regexprules[i][0], this.regexprules[i][1])
        }
        this.feedcontainer.innerHTML=rssoutput
    }

</script>
<script type="text/javascript">
    var newsfeed=new gfeedfetcher("example3", "example3class", "_new")
    newsfeed.addFeed("F.A.O", "http://www.fao.org/news/en/?no_cache=1&feed_id=16872&key=33&type=334") //Specify "label" plus URL to RSS feed
    //newsfeed.addFeed("MSNBC", "http://www.msnbc.msn.com/id/3032091/device/rss/rss.xml") //Specify "label" plus URL to RSS feed
    //newsfeed.addFeed("Yahoo News", "http://rss.news.yahoo.com/rss/topstories") //Specify "label" plus URL to RSS feed
    newsfeed.displayoptions("datetime snippet") //show the specified additional fields
    newsfeed.setentrycontainer("p", "pclass") //Display each entry as a paragraph, and add a "pclass" class to each P
    newsfeed.filterfeed(200, "date") //Show 8 entries, sort by date
    newsfeed.onfeedload=function(){
        var items = $("#example3 p");

        var numItems = items.length;
        var perPage = 50;

        // only show the first 2 (or "first per_page") items initially
        items.slice(perPage).hide();

        // now setup your pagination
        // you need that .pagination-page div before/after your table
        $("#thisDiv").pagination({
            items: numItems,
            itemsOnPage: perPage,
            cssStyle: "compact-theme",
            onPageClick: function(pageNumber) { // this is where the magic happens
                // someone changed page, lets hide/show trs appropriately
                var showFrom = perPage * (pageNumber - 1);
                var showTo = showFrom + perPage;

                items.hide() // first hide everything, then show for the new page
                        .slice(showFrom, showTo).show();
            }
        });


    }
    newsfeed.init() //Always call this last

</script>
</div>
</div>
<div class="row"><div class="col-md-10 col-md-offset-1"><div id="thisDiv"></div></div></div>


<!--feeds body ends nere-->

</div>
</div>
</div>
</div>
</div>
<div class="col-md-2">
    <div class="row">
        <div class="col-md-12 pull-left">
            <!-- Image Slide show-->

            <div id="slider_container_3">

                <div id="SliderName_3" class="SliderName_3">
                </div>

                <div class="">

                </div>
            </div>
        </div>
    </div><br>
    <div class="row" style="width:210px;margin-left:-30px;">
        #chartStatistics()
    </div>
</div>
</div>
</div>


